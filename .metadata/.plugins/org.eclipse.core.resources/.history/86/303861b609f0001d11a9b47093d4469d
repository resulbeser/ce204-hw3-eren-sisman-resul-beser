package View;

import java.awt.EventQueue;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;

import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.border.EmptyBorder;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JTextArea;
import javax.swing.JTextPane;
import javax.swing.KeyStroke;
import javax.swing.JTextField;
import java.awt.TextArea;
import java.awt.Insets;
import javax.swing.JLabel;
import java.awt.Color;
import java.awt.event.KeyListener;
import java.awt.event.KeyAdapter;
import java.awt.event.InputMethodListener;
import java.awt.event.InputMethodEvent;


public class Editor extends JFrame {
	
	
	JFrame window;
	JTextArea textField;
	JMenuBar menuBar;
	JMenu menuFile, menuEdit, menuFormat;
	JComboBox comboBox;
	JMenuItem saveMenu, copyMenu, cutMenu, pasteMenu, undoMenu, redoMenu,freeMenu,javaMenu,cSharpMenu,cppMenu;	
	JButton undoButton, redoButton;
	JLabel lblNewLabel;
	public String clipboard;

    private CommandHistory history = new CommandHistory();
    Editor editor = this;

    
    
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		new Editor ();
		}

	/**
	 * Create the frame.
	 */
	public Editor() {
		
		
		
		createWindow();
		createTextArea();
		createMenuBar();
		KeyShortcuts();
		window.setVisible(true);
		
	}
	
	public void createWindow() {
		window = new JFrame("Notepad");
		window.setSize(800,600);
		window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	}
	
	public void createTextArea() {
		
		textField = new JTextArea();

		
		JScrollPane scrollPane = new JScrollPane(textField, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
		scrollPane.setBorder(BorderFactory.createEmptyBorder());
		window.getContentPane().add(scrollPane);  
	}

	public void createMenuBar() {
		
		menuBar = new JMenuBar();
		window.setJMenuBar(menuBar);

		
		
		menuFile = new JMenu("File");
		menuBar.add(menuFile);
				
		saveMenu = new JMenuItem("Save");
		menuFile.add(saveMenu);
		
		
		
		menuEdit = new JMenu("Edit");
		menuBar.add(menuEdit);
		
		copyMenu = new JMenuItem("Copy");
		menuEdit.add(copyMenu);
		copyMenu.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
            
            	executeCommand(new CopyCommand(editor));
            }
        });



	    

		pasteMenu = new JMenuItem("Paste");
		menuEdit.add(pasteMenu);
		pasteMenu.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
            
            	executeCommand(new PasteCommand(editor));
            }
        });
		


		
		cutMenu = new JMenuItem("Cut");
		menuEdit.add(cutMenu);
		cutMenu.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
            
            	executeCommand(new CutCommand(editor));
            }
        });
		
		undoButton = new JButton("Undo");
		menuBar.add(undoButton);
		undoButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
            
            	undo();
            }
        });

		
		redoButton = new JButton("Redo");
		menuBar.add(redoButton);

        
		//default selected language
        System.out.println("Java selected");
        
        JComboBox comboBox = new JComboBox();
        menuBar.add(comboBox);
        
        comboBox.addItem("Language:    Java");
        comboBox.addItem("Language:    C#");
        comboBox.addItem("Language:    C++");
        
        comboBox.addActionListener(new ActionListener()
        { public void actionPerformed(ActionEvent e)
        { JComboBox cb = (JComboBox)e.getSource();
        String selectedItem = (String)cb.getSelectedItem();
        
        // if selected language is C++, convert to C++ color. 
        if (selectedItem.equals("Language:    C++")) 
        { System.out.println("C++ selected"); } 
        else if (selectedItem.equals("Language:    C#")) 
        { System.out.println("C# selected"); } 
        else { System.out.println("Java selected"); } } });
		
        
        
		lblNewLabel = new JLabel("                                                                                                                                                ");
		lblNewLabel.setForeground(new Color(255, 255, 255));
		menuBar.add(lblNewLabel);
		
	}

	private void executeCommand(Command command) {

		if (command.execute()) {
            history.push(command);
        }
    }
    private void undo() {
        if (history.isEmpty()) return;

        Command command = history.pop();
        if (command != null) {
            command.undo();
        }
    }

    
    
    private void KeyShortcuts()
    {

		textField.addKeyListener(new KeyAdapter() {
            public void keyPressed(KeyEvent e) {
                if ((e.getKeyCode() == KeyEvent.VK_C) && ((e.getModifiersEx() & KeyEvent.CTRL_DOWN_MASK) != 0)) {
                	executeCommand(new CopyCommand(editor));
                }
            }
        });
    	
		
		textField.addKeyListener(new KeyAdapter() {
            public void keyPressed(KeyEvent e) {
                if ((e.getKeyCode() == KeyEvent.VK_V) && ((e.getModifiersEx() & KeyEvent.CTRL_DOWN_MASK) != 0)) {
                	executeCommand(new PasteCommand(editor));
                }
            }
        });
    	
    }
    
    JFileChooser fileChooser = new JFileChooser();
    int userChoice = fileChooser.showSaveDialog(yourParentComponent);

    if (userChoice == JFileChooser.APPROVE_OPTION) {
        // User clicked the "Save" button in the file chooser dialog
        String selectedFilePath = fileChooser.getSelectedFile().getPath();
        
        // Continue with the file saving process
        // ...
    } else if (userChoice == JFileChooser.CANCEL_OPTION) {
        // User clicked the "Cancel" button in the file chooser dialog
        // Handle this case as needed (e.g., show a message or perform other actions)
        JOptionPane.showMessageDialog(yourParentComponent, "File saving canceled.");
    }
    
    
    
    
    
    
    
    
    

}